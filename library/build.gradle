plugins {
    id "maven-publish"
    id 'org.jetbrains.kotlin.jvm'
    id 'signing'
}

version '0.4.5'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50"
    implementation 'com.github.mifmif:generex:1.0.2'
    implementation 'org.reflections:reflections:0.9.11'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.3.50'
    implementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.2'
    test.useJUnitPlatform()
}
compileJava.dependsOn(processResources)

test.testLogging {
    showStandardStreams = true
}

group "ru.kontur.kinfra.kfixture"

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'ru.kontur.kinfra.kfixture'
            artifactId 'kfixture'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Generate test data'
            name 'KFixture'

            url 'https://github.com/skbkontur/KFixture'
            organization {
                name 'skbkontur'
                url 'https://github.com/skbkontur'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/skbkontur/KFixture/issues'
            }
            licenses {
                license {
                    name 'MIT'
                    url 'https://github.com/skbkontur/KFixture/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/skbkontur/KFixture'
            }
            developers {
                developer {
                    name 'Konstantin Volivach'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}